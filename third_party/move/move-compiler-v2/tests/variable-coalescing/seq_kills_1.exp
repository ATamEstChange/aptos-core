============ initial bytecode ================

[variant baseline]
fun m::test($t0: u64): bool {
     var $t1: bool
     var $t2: u64
     var $t3: u64
     var $t4: u64
     var $t5: u64
     var $t6: u64
  0: $t2 := infer($t0)
  1: $t3 := infer($t2)
  2: $t4 := infer($t3)
  3: $t6 := 1
  4: $t5 := +($t0, $t6)
  5: $t3 := infer($t5)
  6: $t1 := ==($t2, $t4)
  7: return $t1
}

============ after VariableCoalescingAnnotator: ================

[variant baseline]
fun m::test($t0: u64): bool {
     var $t1: bool
     var $t2: u64
     var $t3: u64
     var $t4: u64
     var $t5: u64
     var $t6: u64
     # live vars: $t0
     # events: b:$t0, b:$t2
  0: $t2 := copy($t0)
     # live vars: $t0, $t2
     # events: b:$t3
  1: $t3 := copy($t2)
     # live vars: $t0, $t2, $t3
     # events: b:$t4
  2: $t4 := move($t3)
     # live vars: $t0, $t2, $t4
     # events: b:$t6
  3: $t6 := 1
     # live vars: $t0, $t2, $t4, $t6
     # events: e:$t0, e:$t6, b:$t5
  4: $t5 := +($t0, $t6)
     # live vars: $t2, $t4, $t5
     # events: e:$t3, e:$t5
  5: $t3 := move($t5)
     # live vars: $t2, $t4
     # events: e:$t2, e:$t4, b:$t1
  6: $t1 := ==($t2, $t4)
     # live vars: $t1
     # events: e:$t1
  7: return $t1
}

============ after VariableCoalescingTransformer: ================

[variant baseline]
fun m::test($t0: u64): bool {
     var $t1: bool
     var $t2: u64
     var $t3: u64
     var $t4: u64
     var $t5: u64 [unused]
     var $t6: u64
  0: $t2 := copy($t0)
  1: $t3 := copy($t2)
  2: $t4 := move($t3)
  3: $t6 := 1
  4: $t0 := +($t0, $t6)
  5: $t3 := move($t0)
  6: $t1 := ==($t2, $t4)
  7: return $t1
}

============ after DeadStoreElimination: ================

[variant baseline]
fun m::test($t0: u64): bool {
     var $t1: bool
     var $t2: u64
     var $t3: u64
     var $t4: u64
     var $t5: u64 [unused]
     var $t6: u64
  0: $t2 := copy($t0)
  1: $t3 := copy($t2)
  2: $t4 := move($t3)
  3: $t6 := 1
  4: $t0 := +($t0, $t6)
  5: $t1 := ==($t2, $t4)
  6: return $t1
}


============ disassembled file-format ==================
// Move bytecode v7
module c0ffee.m {


test(Arg0: u64): bool /* def_idx: 0 */ {
L0:	loc1: u64
L1:	loc2: u64
L2:	loc3: u64
L3:	loc4: bool
B0:
	0: CopyLoc[0](Arg0: u64)
	1: StLoc[1](loc0: u64)
	2: CopyLoc[1](loc0: u64)
	3: StLoc[2](loc1: u64)
	4: MoveLoc[2](loc1: u64)
	5: StLoc[3](loc2: u64)
	6: LdU64(1)
	7: StLoc[4](loc3: u64)
	8: MoveLoc[0](Arg0: u64)
	9: MoveLoc[4](loc3: u64)
	10: Add
	11: MoveLoc[1](loc0: u64)
	12: MoveLoc[3](loc2: u64)
	13: Eq
	14: StLoc[5](loc4: bool)
	15: Pop
	16: MoveLoc[5](loc4: bool)
	17: Ret
}
}
