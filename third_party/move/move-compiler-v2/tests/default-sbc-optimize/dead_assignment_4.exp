
Diagnostics:
warning: Unused local variable `x`. Consider removing or prefixing with an underscore: `_x`
  ┌─ tests/default-sbc-optimize/dead_assignment_4.move:3:13
  │
3 │         let x = 1;
  │             ^

warning: Unused local variable `x`. Consider removing or prefixing with an underscore: `_x`
  ┌─ tests/default-sbc-optimize/dead_assignment_4.move:9:13
  │
9 │         let x = y;
  │             ^

warning: Unused local variable `x`. Consider removing or prefixing with an underscore: `_x`
   ┌─ tests/default-sbc-optimize/dead_assignment_4.move:14:13
   │
14 │         let x = y;
   │             ^

warning: Unused parameter `y`. Consider removing or prefixing with an underscore: `_y`
   ┌─ tests/default-sbc-optimize/dead_assignment_4.move:18:22
   │
18 │     public fun test4(y: u64): u64 {
   │                      ^

============ initial bytecode ================

[variant baseline]
public fun m::test1(): u64 {
     var $t0: u64
     var $t1: u64
     var $t2: u64
     var $t3: u64
     var $t4: u64
  0: $t2 := 1
  1: $t1 := infer($t2)
  2: $t4 := 3
  3: $t3 := infer($t4)
  4: $t0 := infer($t3)
  5: return $t0
}


[variant baseline]
public fun m::test2($t0: u64): u64 {
     var $t1: u64
     var $t2: u64
  0: $t2 := infer($t0)
  1: $t1 := infer($t0)
  2: return $t1
}


[variant baseline]
public fun m::test3($t0: u64): u64 {
     var $t1: u64
     var $t2: u64
  0: $t2 := infer($t0)
  1: $t1 := 8
  2: return $t1
}


[variant baseline]
public fun m::test4($t0: u64): u64 {
     var $t1: u64
     var $t2: u64
     var $t3: u64
  0: $t3 := 1
  1: $t2 := infer($t3)
  2: $t1 := infer($t2)
  3: return $t1
}

============ after DeadStoreElimination: ================

[variant baseline]
public fun m::test1(): u64 {
     var $t0: u64 [unused]
     var $t1: u64 [unused]
     var $t2: u64 [unused]
     var $t3: u64 [unused]
     var $t4: u64
  0: $t4 := 3
  1: return $t4
}


[variant baseline]
public fun m::test2($t0: u64): u64 {
     var $t1: u64 [unused]
     var $t2: u64 [unused]
  0: return $t0
}


[variant baseline]
public fun m::test3($t0: u64): u64 {
     var $t1: u64 [unused]
     var $t2: u64 [unused]
  0: $t0 := 8
  1: return $t0
}


[variant baseline]
public fun m::test4($t0: u64): u64 {
     var $t1: u64 [unused]
     var $t2: u64 [unused]
     var $t3: u64 [unused]
  0: $t0 := 1
  1: return $t0
}


============ disassembled file-format ==================
// Move bytecode v7
module c0ffee.m {


public test1(): u64 /* def_idx: 0 */ {
B0:
	0: LdU64(3)
	1: Ret
}
public test2(Arg0: u64): u64 /* def_idx: 1 */ {
B0:
	0: MoveLoc[0](Arg0: u64)
	1: Ret
}
public test3(Arg0: u64): u64 /* def_idx: 2 */ {
B0:
	0: LdU64(8)
	1: Ret
}
public test4(Arg0: u64): u64 /* def_idx: 3 */ {
B0:
	0: LdU64(1)
	1: Ret
}
}
