============ initial bytecode ================

[variant baseline]
fun m::test($t0: bool): u64 {
     var $t1: u64
     var $t2: u64
     var $t3: u64
     var $t4: u64
     var $t5: u64
     var $t6: u64
     var $t7: u64
     var $t8: u64
  0: $t3 := 2
  1: $t2 := infer($t3)
  2: if ($t0) goto 3 else goto 8
  3: label L0
  4: $t5 := 3
  5: $t4 := infer($t5)
  6: $t1 := infer($t4)
  7: goto 13
  8: label L1
  9: $t8 := 1
 10: $t7 := +($t2, $t8)
 11: $t6 := infer($t7)
 12: $t1 := infer($t6)
 13: label L2
 14: return $t1
}

============ after DeadStoreElimination: ================

[variant baseline]
fun m::test($t0: bool): u64 {
     var $t1: u64 [unused]
     var $t2: u64 [unused]
     var $t3: u64
     var $t4: u64 [unused]
     var $t5: u64
     var $t6: u64 [unused]
     var $t7: u64 [unused]
     var $t8: u64
  0: $t3 := 2
  1: if ($t0) goto 2 else goto 5
  2: label L0
  3: $t5 := 3
  4: goto 9
  5: label L1
  6: $t8 := 1
  7: $t3 := +($t3, $t8)
  8: $t5 := move($t3)
  9: label L2
 10: return $t5
}


============ disassembled file-format ==================
// Move bytecode v7
module c0ffee.m {


test(Arg0: bool): u64 /* def_idx: 0 */ {
L0:	loc1: u64
L1:	loc2: u64
B0:
	0: LdU64(2)
	1: MoveLoc[0](Arg0: bool)
	2: StLoc[0](Arg0: bool)
	3: StLoc[1](loc0: u64)
	4: MoveLoc[0](Arg0: bool)
	5: BrFalse(9)
B1:
	6: LdU64(3)
	7: StLoc[2](loc1: u64)
	8: Branch(15)
B2:
	9: LdU64(1)
	10: StLoc[3](loc2: u64)
	11: CopyLoc[1](loc0: u64)
	12: MoveLoc[3](loc2: u64)
	13: Add
	14: StLoc[2](loc1: u64)
B3:
	15: MoveLoc[2](loc1: u64)
	16: Ret
}
}
