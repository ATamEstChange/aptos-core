============ initial bytecode ================

[variant baseline]
fun m::add($t0: u64, $t1: u64): u64 {
     var $t2: u64
  0: $t2 := +($t0, $t1)
  1: return $t2
}


[variant baseline]
public fun m::test($t0: u64): u64 {
     var $t1: u64
     var $t2: u64
     var $t3: u64
     var $t4: u64
     var $t5: u64
  0: $t2 := infer($t0)
  1: $t5 := 1
  2: $t4 := +($t0, $t5)
  3: $t0 := infer($t4)
  4: $t3 := infer($t0)
  5: $t1 := m::add($t2, $t3)
  6: return $t1
}

============ after DeadStoreElimination: ================

[variant baseline]
fun m::add($t0: u64, $t1: u64): u64 {
     var $t2: u64 [unused]
  0: $t0 := +($t0, $t1)
  1: return $t0
}


[variant baseline]
public fun m::test($t0: u64): u64 {
     var $t1: u64 [unused]
     var $t2: u64
     var $t3: u64 [unused]
     var $t4: u64 [unused]
     var $t5: u64
  0: $t2 := copy($t0)
  1: $t5 := 1
  2: $t5 := +($t0, $t5)
  3: $t0 := move($t5)
  4: $t0 := m::add($t2, $t0)
  5: return $t0
}


============ disassembled file-format ==================
// Move bytecode v7
module c0ffee.m {


add(Arg0: u64, Arg1: u64): u64 /* def_idx: 0 */ {
B0:
	0: CopyLoc[0](Arg0: u64)
	1: MoveLoc[1](Arg1: u64)
	2: Add
	3: Ret
}
public test(Arg0: u64): u64 /* def_idx: 1 */ {
L0:	loc1: u64
B0:
	0: CopyLoc[0](Arg0: u64)
	1: StLoc[1](loc0: u64)
	2: LdU64(1)
	3: StLoc[2](loc1: u64)
	4: MoveLoc[0](Arg0: u64)
	5: CopyLoc[2](loc1: u64)
	6: Add
	7: StLoc[0](Arg0: u64)
	8: MoveLoc[1](loc0: u64)
	9: CopyLoc[0](Arg0: u64)
	10: Call add(u64, u64): u64
	11: Ret
}
}
