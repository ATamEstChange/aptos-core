
Diagnostics:
warning: Unused local variable `a`. Consider removing or prefixing with an underscore: `_a`
  ┌─ tests/default-sbc-optimize/call_1.move:7:13
  │
7 │         let a = p;
  │             ^

============ initial bytecode ================

[variant baseline]
fun m::id($t0: u64): u64 {
     var $t1: u64
  0: $t1 := infer($t0)
  1: return $t1
}


[variant baseline]
fun m::test($t0: u64): u64 {
     var $t1: u64
     var $t2: u64
     var $t3: u64
     var $t4: u64
     var $t5: u64
     var $t6: u64
  0: $t2 := infer($t0)
  1: $t3 := infer($t0)
  2: $t4 := infer($t3)
  3: $t6 := m::id($t4)
  4: $t5 := m::id($t6)
  5: $t1 := m::id($t5)
  6: return $t1
}

============ after DeadStoreElimination: ================

[variant baseline]
fun m::id($t0: u64): u64 {
     var $t1: u64 [unused]
  0: return $t0
}


[variant baseline]
fun m::test($t0: u64): u64 {
     var $t1: u64 [unused]
     var $t2: u64 [unused]
     var $t3: u64 [unused]
     var $t4: u64 [unused]
     var $t5: u64 [unused]
     var $t6: u64 [unused]
  0: $t0 := m::id($t0)
  1: $t0 := m::id($t0)
  2: $t0 := m::id($t0)
  3: return $t0
}


============ disassembled file-format ==================
// Move bytecode v7
module c0ffee.m {


id(Arg0: u64): u64 /* def_idx: 0 */ {
B0:
	0: MoveLoc[0](Arg0: u64)
	1: Ret
}
test(Arg0: u64): u64 /* def_idx: 1 */ {
B0:
	0: CopyLoc[0](Arg0: u64)
	1: Call id(u64): u64
	2: StLoc[0](Arg0: u64)
	3: CopyLoc[0](Arg0: u64)
	4: Call id(u64): u64
	5: StLoc[0](Arg0: u64)
	6: CopyLoc[0](Arg0: u64)
	7: Call id(u64): u64
	8: Ret
}
}
