============ initial bytecode ================

[variant baseline]
fun m::update($t0: &mut u64) {
     var $t1: u64
  0: $t1 := 0
  1: write_ref($t0, $t1)
  2: return ()
}


[variant baseline]
fun m::test($t0: u64): u64 {
     var $t1: u64
     var $t2: u64
     var $t3: u64
     var $t4: u64
     var $t5: &mut u64
  0: $t2 := infer($t0)
  1: $t3 := infer($t0)
  2: $t4 := infer($t3)
  3: $t5 := borrow_local($t2)
  4: m::update($t5)
  5: $t1 := infer($t4)
  6: return $t1
}

============ after DeadStoreElimination: ================

[variant baseline]
fun m::update($t0: &mut u64) {
     var $t1: u64
  0: $t1 := 0
  1: write_ref($t0, $t1)
  2: return ()
}


[variant baseline]
fun m::test($t0: u64): u64 {
     var $t1: u64 [unused]
     var $t2: u64
     var $t3: u64 [unused]
     var $t4: u64 [unused]
     var $t5: &mut u64
  0: $t2 := copy($t0)
  1: $t5 := borrow_local($t2)
  2: m::update($t5)
  3: return $t0
}


============ disassembled file-format ==================
// Move bytecode v7
module c0ffee.m {


update(Arg0: &mut u64) /* def_idx: 0 */ {
B0:
	0: LdU64(0)
	1: MoveLoc[0](Arg0: &mut u64)
	2: WriteRef
	3: Ret
}
test(Arg0: u64): u64 /* def_idx: 1 */ {
B0:
	0: CopyLoc[0](Arg0: u64)
	1: StLoc[1](loc0: u64)
	2: MutBorrowLoc[1](loc0: u64)
	3: Call update(&mut u64)
	4: MoveLoc[0](Arg0: u64)
	5: Ret
}
}
